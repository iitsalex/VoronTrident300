#####################################################################
#   Macros
#####################################################################

[gcode_macro BT_UNLOAD_ALL_LANES]
gcode: 
  BT_LANE_EJECT lane=1
  BT_LANE_EJECT lane=2
  BT_LANE_EJECT lane=3
  BT_LANE_EJECT lane=4
    
[gcode_macro PRINT_START]
gcode:
    
    {% set BED_TEMP = params.BED|default(50)|float %}
    {% set EXTRUDER_TEMP = params.EXTRUDER|default(190)|float %}
    {% set S_EXTRUDER_TEMP = 150|float %}
    {% set WIPE_EXTRUDER_TEMP = 180|float %}
    {% set chambertemp = params.CHAMBER|default(0)|int %}
    {% set initial_tool = params.TOOL|int %}
    {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
    {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
    {% set z_wait = printer.toolhead.axis_maximum.z|float / 2 %}

    SET_VELOCITY_LIMIT ACCEL=20000
    SET_GCODE_OFFSET Z=0     # Clears current offset
    SET_FAN_SPEED FAN=controller_fan SPEED=0.75
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0

    # Set bed temp and home in the meantime
    M140 S{BED_TEMP}               ; set bed to target temp
    M117 Homing...
    G28 METHOD=PROXIMITY
    
    {% if BED_TEMP >= 90 %}
        # SET_FAN_SPEED FAN=exhaust_fan SPEED=0
        M106 S256
        G1 X{x_wait} Y{y_wait} Z{z_wait} F9000                    # Goes to center of the bed
        SET_FAN_SPEED FAN=crossflow SPEED=1
        SET_HEATER_TEMPERATURE HEATER=ch TARGET={chambertemp}
        M190 S{BED_TEMP}                                  # Sets the target temp for the bed
        M117 Heat Soaking...
        SET_DISPLAY_TEXT MSG="Heatsoak: {chambertemp}c"  # Displays info
        TEMPERATURE_WAIT SENSOR="heater_generic ch" MINIMUM={chambertemp}   # Waits for chamber to reach desired temp
    {% endif %}
    
    M106 S0
    M190 S{BED_TEMP}        # wait for bed final temp
    
    M117 Z_TILT
    Z_TILT_ADJUST
    
    M117 Bed Mesh Calibrate
    BED_MESH_CALIBRATE #ADAPTIVE=1
    BED_MESH_PROFILE LOAD=default

    AFC_PARK
    
    M109 S{WIPE_EXTRUDER_TEMP} ; wait for wiping temperature
    AFC_BRUSH
    G0 Z4
    
    M109 S{S_EXTRUDER_TEMP} ; wait for standby extruder temp
    AFC_BRUSH
    G28 Z METHOD=CONTACT CALIBRATE=1                                                            # Calibrate z offset only after tilt/mesh

    AFC_PARK
    M109 S{EXTRUDER_TEMP} # wait for extruder temp
    T{initial_tool} #Load Initial Tool
    G0 Z4
    AFC_POOP
    AFC_BRUSH
    AFC_KICK
    AFC_BRUSH
    G0 Z3
    
    # {% if BED_TEMP >= 90 %}
    #     SET_FAN_SPEED FAN=exhaust_fan SPEED=0.3
    # {% endif %}
    
    M117 Purge line...
    G1 X190 Y295 Z0.2 F18000.0; Move to start position
    G92 E0                         ; zero the extruder
    G1 E3.0 F3600                 ; push out 3mm of filament
    G1 X90 Y295 Z0.2 F2000.0 E20; Draw one line
    G1 X180 Y293.5 Z0.2 F2000.0 E20; Draw one line
    G92 E0; Reset Extruder

    _BEACON_SET_NOZZLE_TEMP_OFFSET                                                          # Adds toolhead expansion offset (REQUIRES ADDITIONAL MACROS NOT BY DEFAULT Found at:https://github.com/YanceyA/Beacon_Thermal_Expansion_Compensation )
      
    M117 Printing...
    SKEW_PROFILE LOAD=CaliFlower

    
[gcode_macro HEAT_SOAK]
description: heats the bed for a while

variable_target_temp: 0
variable_stage: None ## heating -> soaking -> done -> None

## in seconds
variable_check_interval: 10
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0

gcode:
    {% set TARGET = params.TARGET | default(110) | float %}
    {% set DURATION = (params.DURATION | default(60) | int) * 60 %} ## minutes to seconds

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE={ TARGET }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    ;; fire up the heater
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ TARGET }
    SET_HEATER_TEMPERATURE HEATER=ch TARGET=65

    ;; run the fan to circulate air
    _SET_FAN_SPEED PERCENT=50
    SET_FAN_SPEED FAN=crossflow SPEED=1
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0
    
    ;; put the bed and nozzle where they're a safe distance apart
    {% if printer.toolhead.homed_axes == "xyz" %}
        M118 Printer is already homed
    {% else %}
        M118 Printer needs homing...
        G28
    {% endif %}
    CENTER

    # M84 ;; turn off steppers

    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ check_interval }

[gcode_macro CANCEL_HEAT_SOAK]
description: cancels an in-progress HEAT_SOAK cycle
gcode:
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=1

[delayed_gcode heat_soaker]
; ## debug
; { action_respond_info( printer['gcode_macro HEAT_SOAK'] | tojson )}
gcode:
    {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}

    ## update total time elapsed
    {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

    {% set stage = heat_soak.stage %}
    {% if stage == "heating" and printer.heater_bed.temperature >= heat_soak.target_temp %}
        {% set stage = "soaking" %}
    {% endif %}

    {% if stage == "soaking" %}
        ## update soak countdown
        {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }

        {% if soak_time_remaining == 0 %}
            {% set stage = "done" %}
        {% endif %}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"

    {% if stage in ("done", "cancel") %}

        {% if stage == "cancel" %}
            {% set stage = "done" %}
            TURN_OFF_HEATERS
            M107 ; turn off fan

            M117 { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }
        {% else %}
            M117 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }
        {% endif %}

        ## reset all state vars, except stage, which may be queried via the api
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    {% else %}

        {% if total_time_elapsed % 90 == 0 %}
            ## output status periodically
            {% if stage == "heating" %}
                M117 { "heating -- %.1fm elapsed" | format(total_time_elapsed / 60.0) }
            {% elif stage == "soaking" %}
                M117 { "soaking -- %.1fm remaining" | format(soak_time_remaining / 60.0) }
            {% endif %}
        {% endif %}

        ## trigger ourselves again
        UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ heat_soak.check_interval }

        ## dwell for 1ms to prevent from going idle
        G4 P1

    {% endif %}

[gcode_macro _SET_FAN_SPEED]
gcode:
    M106 S{ (params.PERCENT | float) * 255 / 100 }

[gcode_macro CENTER]
gcode:
    G90
    G0 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_maximum.y/2 } Z{ printer.toolhead.axis_maximum.z/2 } F7200

[gcode_macro CENTER_HEAD]
gcode:
    {% if printer.toolhead.homed_axes == "xyz" %}
        M118 Printer is already homed
    {% else %}
        M118 Printer needs homing...
        G28
    {% endif %}
    G0 X150 Y150 Z60 F3600

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 8, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-3.0 F3600                 ; retract filament
    G90                                      ; absolute positioning
    G0 Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x - 10} Y{th.axis_maximum.y - 10} Z{z_safe} F20000  ; park nozzle at corner rear
    
    {% if printer[printer.toolhead.extruder].temperature >= 240 %}
        SET_FAN_SPEED FAN=exhaust_fan SPEED=1
    {% endif %}
    M107                                     ; turn off fan

    # M109 S180
    # AFC_BRUSH ; wipe nozzle
    # G0 Z10 F20000  ; move nozzle up above wiper
    TURN_OFF_HEATERS
    
    SET_SKEW CLEAR=1
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    SET_FAN_SPEED FAN=controller_fan SPEED=0.25

        # reset nozzle thermal expansion offset
    {% if printer.configfile.settings.beacon is defined %}
        _BEACON_REMOVE_NOZZLE_TEMP_OFFSET
        _BEACON_SET_NOZZLE_TEMP_OFFSET RESET=True
    {% endif %}
    

[gcode_macro update_git]
gcode:
    RUN_SHELL_COMMAND CMD=update_git_script

[gcode_shell_command update_git_script]
command: bash /home/pi/klipper-backup/script.sh
timeout: 90.0
verbose: True

[gcode_macro M600]
gcode:
    PAUSE


[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount
    {% if printer['pause_resume'].is_paused|int == 0 %}     
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro
                                
        #SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor       
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume                
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F1200                                                                     ; raise Z up by z hop amount
            set_gcode_variable MACRO=RESUME VARIABLE=zpause VALUE={printer.toolhead.position.z}   ; save z pausing position
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
            set_gcode_variable MACRO=RESUME VARIABLE=zpause VALUE={printer.toolhead.position.z}   ; save z pausing position
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y-5} F12000   ; park toolhead at rear center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error) 
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=86400                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zpause: 0
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(0)|int %}                                          ; hotend prime amount (in mm)
    {% if printer['pause_resume'].is_paused|int == 1 %}
        # SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #RESETRGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}                                                
            G90                                                                      ; absolute positioning
            G1 X{275} Y{300} F12000                                                     ; moves to back near bucket
            AFC_BRUSH                                                              ; purge and scrub
            G1 Z{zpause} F1200                                                        ; raise back to pause height
            RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=300                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)  
            G91                                                                          ; relative positioning
            M83                                                                          ; relative extruder positioning
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}                      
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}                             
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=300                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}


[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT

# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern
            # Diagonals
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            
            # Box
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
        
        # Small pattern
            # Small diagonals 
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            
            # Small box
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        G28
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED